// Generated by CoffeeScript 1.4.0
(function() {

  window.api_key = 'special-key';

  describe('SwaggerRequest', function() {
    beforeEach(function() {
      window.swagger = new SwaggerApi({
        discoveryUrl: 'http://localhost:8002/api/api-docs?api_key=special-key'
      });
      swagger.build();
      return waitsFor(function() {
        return swagger.ready != null;
      });
    });
    return describe("verifies the get pet operation", function() {
      beforeEach(function() {
        window.body = null;
        window.response = null;
        window.callback = null;
        window.error = null;
        window.success_callback = function(data) {
          return window.response = data;
        };
        return window.error_callback = function(data) {
          return window.error = data;
        };
      });
      it("verifies the response messages from the get operation", function() {
        var operation, responseMessages;
        operation = swagger.pet.operations.getPetById;
        responseMessages = operation.responseMessages;
        expect(responseMessages.toBeDefined);
        expect(responseMessages.length === 2);
        expect(responseMessages[0].code === 400);
        return expect(responseMessages[1].code === 404);
      });
      it("gets help() from the pet operation", function() {
        var operation;
        operation = swagger.pet.operations.getPetById;
        return expect(operation.help() === "petId (required) - ID of pet that needs to be fetched");
      });
      it("verifies the get pet operation", function() {
        var operation, param, parameters;
        operation = swagger.pet.operations.getPetById;
        parameters = operation.parameters;
        expect(parameters.toBeDefined);
        expect(parameters.length === 1);
        param = parameters[0];
        expect(param.name === "petId");
        expect(param.dataType === "string");
        expect(param.paramType === "path");
        return expect(param.description.toBeDefined);
      });
      it("verifies the post pet operation", function() {
        var operation, param, parameters;
        operation = swagger.pet.operations.addPet;
        parameters = operation.parameters;
        expect(parameters.toBeDefined);
        expect(parameters.length === 1);
        param = parameters[0];
        expect(param.name === "body");
        expect(param.dataType === "Pet");
        expect(param.paramType === "body");
        expect(param.description.toBeDefined);
        expect(param.required === true);
        return console.log(param.responseMessages);
      });
      it("verifies the put pet operation", function() {
        var operation, param, parameters;
        operation = swagger.pet.operations.updatePet;
        parameters = operation.parameters;
        expect(parameters.toBeDefined);
        expect(parameters.length === 1);
        param = parameters[0];
        expect(param.name === "body");
        expect(param.dataType === "Pet");
        expect(param.paramType === "body");
        expect(param.description.toBeDefined);
        return expect(param.required === true);
      });
      it("verifies the findByTags operation", function() {
        var operation, param, parameters;
        operation = swagger.pet.operations.findPetsByTags;
        parameters = operation.parameters;
        expect(parameters.toBeDefined);
        expect(parameters.length === 1);
        param = parameters[0];
        expect(param.name === "tags");
        expect(param.dataType === "string");
        expect(param.paramType === "query");
        expect(param.description.toBeDefined);
        expect(param.required === true);
        return expect(param.allowMultiple === true);
      });
      return it("verifies the patch pet operation", function() {
        var operation, param, parameters;
        operation = swagger.pet.operations.partialUpdate;
        parameters = operation.parameters;
        expect(parameters.toBeDefined);
        expect(parameters.length === 2);
        param = parameters[0];
        expect(param.name === "petId");
        expect(param.dataType === "string");
        expect(param.paramType === "path");
        expect(param.description.toBeDefined);
        param = parameters[1];
        expect(param.name === "body");
        expect(param.dataType === "Pet");
        expect(param.paramType === "body");
        expect(param.description.toBeDefined);
        expect(param.allowMultiple === false);
        return expect(param.required === true);
      });
    });
  });

}).call(this);
