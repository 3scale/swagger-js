// Generated by CoffeeScript 1.6.3
(function() {
  window.api_key = 'special-key';

  describe('Swagger Api Listing for file-based 1.2 spec', function() {
    beforeEach(function() {
      var success;
      return success = function() {
        return log("success");
      };
    });
    return describe("verifies loading a specification", function() {
      beforeEach(function() {
        window.body = null;
        window.response = null;
        window.callback = null;
        window.error = null;
        window.success_callback = function(data) {
          return window.response = data;
        };
        return window.error_callback = function(data) {
          return window.error = data;
        };
      });
      it("verifies a 1.2 spec can be read from an object", function() {
        var cb, obj, swagger;
        obj = petstore_1_2_spec;
        swagger = new window.SwaggerApi();
        cb = function(data) {
          var api, resourceListing, _i, _len, _ref, _results;
          resourceListing = data;
          expect(resourceListing.apiDeclarations.length).toBe(3);
          _ref = resourceListing.apiDeclarations;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            api = _ref[_i];
            expect(api.resourcePath).toBeDefined;
            expect(api.apiVersion).toBeDefined;
            expect(api.swaggerVersion).toBe('1.2');
            expect(api.basePath).toBe("http://petstore.swagger.wordnik.com/api");
            expect(api.apis).toBeDefined;
            _results.push(expect(api.models).toBeDefined);
          }
          return _results;
        };
        return swagger.specFromObject(obj, cb);
      });
      it("verifies a 1.2 spec can built", function() {
        var cb, obj, swagger;
        obj = petstore_1_2_spec;
        swagger = new window.SwaggerApi();
        cb = function(data) {
          var api;
          api = swagger.process(data, swagger);
          return window.api = api;
        };
        return swagger.specFromObject(obj, cb);
      });
      it("creates a model signature", function() {
        var model, obj, sampleObj;
        obj = {
          id: "Rat",
          properties: {
            id: {
              type: "integer",
              format: "int64"
            },
            name: {
              type: "string"
            }
          }
        };
        model = new SwaggerModel("Rat", obj);
        sampleObj = model.createJSONSample([]);
        expect(sampleObj.id).toBe(0);
        return expect(sampleObj.name).toBe("");
      });
      return it("creates a model signature", function() {
        var animal, dog, models, obj1, obj2, parent, sampleObj;
        obj1 = {
          id: "Dog",
          properties: {
            id: {
              type: "integer",
              format: "int64"
            },
            name: {
              type: "string"
            },
            parent: {
              $ref: "Animal"
            }
          }
        };
        obj2 = {
          id: "Animal",
          properties: {
            id: {
              type: "integer",
              format: "int64"
            },
            name: {
              type: "string"
            }
          }
        };
        dog = new SwaggerModel("Dog", obj1);
        animal = new SwaggerModel("Animal", obj2);
        models = {};
        models.Dog = dog;
        models.Animal = animal;
        dog.setReferencedModels(models);
        animal.setReferencedModels(models);
        sampleObj = dog.createJSONSample([]);
        expect(sampleObj.id).toBe(0);
        expect(sampleObj.name).toBe("");
        expect(typeof sampleObj.parent).toBe('object');
        parent = sampleObj.parent;
        expect(parent.id).toBe(0);
        return expect(parent.name).toBe("");
      });
    });
  });

}).call(this);
